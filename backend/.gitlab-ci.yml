cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

stages:
  - build
  - test
  - release
  - notify
  - deploy

build-backend-code-job:
  stage: build
  script:
    - unset SPRING_DATASOURCE_URL SPRING_DATASOURCE_USERNAME SPRING_DATASOURCE_PASSWORD SPRING_DATA_MONGODB_URI
    - cd backend
    - >
      mvn package 
      -Dmaven.repo.local=${MAVEN_REPO_PATH} 
      -Dversion.application=${VERSION} 
      -Dspring.flyway.enabled=false
      -Dspring.cloud.vault.enabled=false
  artifacts:
    paths:
      - backend/target/sausage-store-${VERSION}.jar

build-image-backend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

include:
  - template: Security/SAST.gitlab-ci.yml

semgrep-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
  needs:
    - build-backend-code-job

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - unset SPRING_DATASOURCE_URL SPRING_DATASOURCE_USERNAME SPRING_DATASOURCE_PASSWORD SPRING_DATA_MONGODB_URI
    - cd backend
    - >
      mvn clean verify sonar:sonar 
      -Dsonar.host.url=${SONARQUBE_URL} 
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK} 
      -Dsonar.login=${SONAR_LOGIN} 
      -Dsonar.projectName=${SONAR_PROJECT_KEY} 
      -Dsonar.qualitygate.wait=true
      -Dspring.flyway.enabled=false
      -Dspring.cloud.vault.enabled=false
  allow_failure: false
  needs:
    - build-backend-code-job

telegram-notification-backend:
  stage: notify
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - >
      curl -X POST -H "Content-type: application/json" 
      --data '{"chat_id":"-1002558070233", "text":"'"${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_SHA}/download?job=${CI_JOB_NAME}"'"}' 
      https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage
  needs:
    - build-backend-code-job

release:
  stage: release
  script:
    - cd backend
    - >
      mvn deploy -DskipTests -s settings.xml 
      -Dversion.application=${VERSION} 
      -Dmaven.repo.local=${MAVEN_REPO_PATH}
  needs:
    - sonarqube-backend-sast
  when: manual

release-image-backend:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION
  needs:
    - build-image-backend

deploy:
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/backend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}"; export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./backend/deploy.sh
  environment:
    name: staging_backend
    url: http://std-040-31.praktikum-services.tech/
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy-image-backend:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk update
    - apk add openssh-client bash gettext
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - ssh ${DEV_USER}@${DEV_HOST}
      "export VERSION=${VERSION};
       export VAULT_TOKEN=${VAULT_TOKEN};
       export CI_REGISTRY_USER=${CI_REGISTRY_USER};
       export CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD};
       export CI_REGISTRY=${CI_REGISTRY};
       export CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE};
       export SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL};
       export SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/sausage-store);
       export SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store);
       export SPRING_DATA_MONGODB_URI='$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)';
      /bin/bash -s" < ./backend/deploy_template.sh
  when: manual
  needs:
    - release-image-backend
